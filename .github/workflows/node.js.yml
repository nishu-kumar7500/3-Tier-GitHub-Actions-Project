# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: Agent-1

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set UP nodejs
      uses: actions/setup-node@v4
      with:
        node-version: '23'

    - name: Comiple FrotEnd
      run: |
       cd client
       find . -name "*.js" -exec node --check {} +

    - name: Comiple BackEnd
      run: |
       cd client
       find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: Agent-1
    needs: compile

    steps:
    - name: CheckOut Code
      uses: actions/checkout@v4

    - name: Gitleaks Setup
      uses: gitleaks/gitleaks-action@v2

    - name: GitLeaks Scan
      run: |
       gitleaks detect --source ./client --exit-code 1
       gitleaks detect --source ./api --exit-code 1

  trivy_fs_scan:
    runs-on: Agent-1
    needs: gitleaks-scan

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        scan-ref: '.'
        format: table
        ignore-unfixed: true
        severity: 'HIGH,CRITICAL'
        vuln-type: 'os,library'

  sonar-frontend:
    runs-on: Agent-1
    needs: trivy_fs_scan

    steps:
    - name: CheckOut Code
      uses: actions/checkout@v4
    
    - name: SonarQube Scan Client
      uses: SonarSource/sonarqube-scan-action@master
      with:
        projectBaseDir: client
        args:
          -Dsonar.projectKey=myorg_client
          -Dsonar.projectName=myorg_client
          -Dsonar.sources=.
          -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  sonar-backtend:
    runs-on: Agent-1
    needs: sonar-frontend

    steps:
    - name: CheckOut Code
      uses: actions/checkout@v4
    
    - name: SonarQube Scan Client
      uses: SonarSource/sonarqube-scan-action@master
      with:
        projectBaseDir: api
        args:
          -Dsonar.projectKey=myorg_api
          -Dsonar.projectName=myorg_api
          -Dsonar.sources=.
          -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}


